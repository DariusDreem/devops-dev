name: Build, Push & Deploy to Scaleway

on:
  push:
    branches: [main]

jobs:

  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud
          username: ${{ secrets.SCW_REGISTRY_USER }}
          password: ${{ secrets.SCW_REGISTRY_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.SCW_REGISTRY }}

  deploy-api:
    needs: build-api
    runs-on: ubuntu-latest
    outputs:
      BACKEND_URL: ${{ steps.backend-url.outputs.BACKEND_URL }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Scaleway CLI
        uses: scaleway/action-scw@v0
        with:
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_ORGANIZATION_ID }}
          save-config: true
          export-config: true

      - name: Get or create backend container
        id: backend-container
        run: |
          CONTAINER_ID=$(scw container container list name=container-devops-back namespace-id=${{ secrets.SCALEWAY_NAMESPACE_ID }} --output json | jq -r '.[0].id // empty')

          if [[ "$CONTAINER_ID" == "" || "$CONTAINER_ID" == "null" ]]; then
            echo "Backend container not found, creating..."
            CONTAINER_ID=$(scw container container create \
              name=container-devops-back \
              namespace-id=${{ secrets.SCALEWAY_NAMESPACE_ID }} \
              registry-image=${{ secrets.SCW_REGISTRY }} \
              port=3000 \
              privacy=public \
              min-scale=0 \
              max-scale=1 \
              memory-limit=256 \
              cpu-limit=250 \
              --output json | jq -r '.id')
          fi

          if [[ -z "$CONTAINER_ID" || "$CONTAINER_ID" == "null" ]]; then
            echo "Failed to get/create backend container ID"
            exit 1
          fi

          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_OUTPUT

      - name: Update backend container & get backend URL
        id: backend-url
        run: |
          CONTAINER_ID=${{ steps.backend-container.outputs.CONTAINER_ID }}
          UPDATE_RESULT=$(scw container container update "$CONTAINER_ID" registry-image=${{ secrets.SCW_REGISTRY }} --output json)
          DOMAIN=$(echo "$UPDATE_RESULT" | jq -r '.domain_name')
          BACKEND_URL="https://$DOMAIN"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT

  build-front:
    needs: deploy-api
    runs-on: ubuntu-latest
    env:
      FRONT_IMAGE: rg.fr-par.scw.cloud/namespace-reungoat-nathan/my-front:latest
      BACKEND_URL: ${{ needs.deploy-api.outputs.BACKEND_URL }}
    steps:
      - uses: actions/checkout@v3

      - name: Inject VITE_API_URL
        run: echo "VITE_API_URL=${BACKEND_URL}" > front/.env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud
          username: ${{ secrets.SCW_REGISTRY_USER }}
          password: ${{ secrets.SCW_REGISTRY_PASSWORD }}

      - name: Build and push Front image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ env.FRONT_IMAGE }}

  deploy-front:
    needs: [build-front, deploy-api]
    runs-on: ubuntu-latest
    env:
      FRONT_IMAGE: rg.fr-par.scw.cloud/namespace-reungoat-nathan/my-front:latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Scaleway CLI
        uses: scaleway/action-scw@v0
        with:
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_ORGANIZATION_ID }}
          save-config: true
          export-config: true

      - name: Get or create frontend container
        id: frontend-container
        run: |
          CONTAINER_ID=$(scw container container list name=container-devops-front namespace-id=${{ secrets.SCALEWAY_NAMESPACE_ID }} --output json | jq -r '.[0].id // empty')

          if [[ "$CONTAINER_ID" == "" || "$CONTAINER_ID" == "null" ]]; then
            echo "Frontend container not found, creating..."
            CONTAINER_ID=$(scw container container create \
              name=container-devops-front \
              namespace-id=${{ secrets.SCALEWAY_NAMESPACE_ID }} \
              registry-image=${{ env.FRONT_IMAGE }} \
              port=80 \
              privacy=public \
              min-scale=0 \
              max-scale=1 \
              memory-limit=256 \
              cpu-limit=250 \
              --output json | jq -r '.id')
          fi

          if [[ -z "$CONTAINER_ID" || "$CONTAINER_ID" == "null" ]]; then
            echo "Failed to get/create frontend container ID"
            exit 1
          fi

          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_OUTPUT

      - name: Update frontend container image
        run: |
          scw container container update ${{ steps.frontend-container.outputs.CONTAINER_ID }} registry-image=${{ env.FRONT_IMAGE }}
